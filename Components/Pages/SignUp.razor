@page "/SignUp"
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using AmazonSimulatorApp.Data
@using static MudBlazor.CategoryTypes

<MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="min-height: 100vh; margin-top: 50px;">
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Class="pa-6" Elevation="4" Style="border-radius: 10px; border: 2px solid #1976d2;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-2">Sign up</MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">Sign up to continue</MudText>

            @if (showSuccessAlert)
            {
                <MudAlert Severity="Severity.Success" Class="mb-3">User registered successfully, now you can login with your account</MudAlert>
            }
            @if (showFailedAlert)
            {
                <MudAlert Severity="Severity.Error" Class="mb-3">An error occurred</MudAlert>
            }

            <MudForm @ref="form" IsValid="@success">
                <MudTextField @bind-Value="name" Label="Name" Required="true" RequiredError="Name is required!" Class="mb-3" />
                <MudTextField @bind-Value="email" Label="Email" Required="true"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address" })" Class="mb-3" />
                <MudTextField @bind-Value="password" Label="Password" InputType="InputType.Password" Required="true"
                              RequiredError="Password is required!" Class="mb-3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="RegisterUser">
                    Sign up
                </MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;
    private bool success;
    private bool showSuccessAlert = false;
    private bool showFailedAlert = false;

    private string name;
    private string email;
    private string password;

    private async Task RegisterUser()
    {
        try
        {
            if (form.IsValid)
            {
                var user = new User
                    {
                        Name = name,
                        Email = email,
                        Password = HashPassword(password), // Ensure to hash the password
                        Role = "User", // Default role for new users
                        IsVerified = false, // Set false until email verification
                        IsActive = true // User is active by default
                    };

                DbContext.Users.Add(user);
                await DbContext.SaveChangesAsync();

                showSuccessAlert = true;
                showFailedAlert = false;

                name = string.Empty;
                email = string.Empty;
                password = string.Empty;
            }
        }
        catch (Exception)
        {
            showSuccessAlert = false;
            showFailedAlert = true;
        }
    }

    private string HashPassword(string password)
    {
        // Replace this with a real hashing algorithm like BCrypt, SHA256, or PBKDF2
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(password));
    }
}
